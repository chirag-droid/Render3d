name: 'build & test'
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - master
      - 'releases/*'

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            cpp_flags: /WX
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            cpp_flags: -Werror
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            cpp_flags: -Werror
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            cpp_flags: -Werror
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - if: matrix.os == 'ubuntu-latest'
        name: Install x dev packages
        run: sudo apt-get update && sudo apt-get install -y xorg-dev

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.275.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: Setup ccache
        uses: chirag-droid/setup-ccache@v1.1
        with:
          # default - ccache-key
          key: 'render3d-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ matrix.build-type }}'
      
      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -D CMAKE_C_COMPILER_LAUNCHER=ccache
          -D CMAKE_CXX_COMPILER_LAUNCHER=ccache
          -S ${{ github.workspace }}

      - name: Build Render3D
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Run Tests
        run: |
          cd ${{ steps.strings.outputs.build-output-dir }}
          ctest -j2 --output-on-failure
